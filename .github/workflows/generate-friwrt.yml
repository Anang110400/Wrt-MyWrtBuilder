#=====================================================================================
# Description:   Build OpenWrt and ImmortalWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#=====================================================================================
name: Generate friWrt Firmware

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select device target:"
        required: true
        default: "Raspberry Pi 4B"
        type: choice
        options:
          - Raspberry Pi 1B
          - Raspberry Pi 2B
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - x86-64
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:23.05.2"
        type: choice
        options:
          - openwrt:21.02.7
          - openwrt:23.05.2
          - immortalwrt:21.02.7
          - immortalwrt:23.05.1
      tunnel:
        description: "Select tunnel app (passwall only support for newer branch with fw4 firewall!):"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - openclash
          - passwall
          - openclash-passwall
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean
      squashfs:
        description: "Generate squashfs image"
        required: false
        default: "false"
        type: boolean

env:
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  ROOTFS_SQUASHFS: ${{ inputs.squashfs }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta

jobs:
  Generate:
    runs-on: ubuntu-latest

    steps:
      - name: Initialization System Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Setup Environment Variables
        run: |
          echo "WORKING_DIR="${RELEASE_BRANCH%:*}"-imagebuilder-"$TARGET_2".Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads."${RELEASE_BRANCH%:*}".org" >> $GITHUB_ENV
          echo "BASE=${RELEASE_BRANCH%:*}" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH#*:}" >> $GITHUB_ENV
          echo "tags=$( [[ "${RELEASE_BRANCH#*:}" == "21.02.7" ]] && echo "21.02" )" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          if [ "$TARGET" == "Raspberry Pi 1B" ]; then
            echo "PROFILE=rpi-1" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2708" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2708" >> $GITHUB_ENV
            echo "ARCH_1=armv6" >> $GITHUB_ENV
            echo "ARCH_2=arm" >> $GITHUB_ENV
            echo "ARCH_3=arm_arm1176jzf-s_vfp" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 2B" ]; then
            echo "PROFILE=rpi-2" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2709" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2709" >> $GITHUB_ENV
            echo "ARCH_1=armv7" >> $GITHUB_ENV
            echo "ARCH_2=arm" >> $GITHUB_ENV
            echo "ARCH_3=arm_cortex-a7_neon-vfpv4" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 3B" ]; then
            echo "PROFILE=rpi-3" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2710" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2710" >> $GITHUB_ENV
            echo "ARCH_1=armv7" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_cortex-a53" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 4B" ]; then
            echo "PROFILE=rpi-4" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2711" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2711" >> $GITHUB_ENV
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_cortex-a72" >> $GITHUB_ENV
          elif [ "$TARGET" == "x86-64" ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=x86/64" >> $GITHUB_ENV
            echo "TARGET_NAME=x86-64" >> $GITHUB_ENV
            echo "ARCH_1=amd64" >> $GITHUB_ENV
            echo "ARCH_2x86_64" >> $GITHUB_ENV
            echo "ARCH_3=x86_64" >> $GITHUB_ENV
          fi
      
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: origin

      - name: Download Image Builder ${{ env.BASE }}-${{ env.BRANCH }}-${{ inputs.target }}
        id: download
        run: |
          RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
          wget -nv "$RELEASE"
          tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          [ "$ARCH_1" == "amd64" ] && ARCH_1=x86
          if [[ "$BRANCH" == "21.02.7" ]]; then
             grep -E "^all-all|^old-$tags|^$ARCH_1-$tags" external-package-urls.txt | awk '{print $2}' > output_url.txt
          else
             grep -E "^all-all|^all|^$ARCH_1" external-package-urls.txt | grep -vE "^$ARCH_1-$tags" | awk '{print $2}' > output_url.txt
          fi
          wget --no-check-certificate -i output_url.txt -nv -P packages
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/builder-patch.sh
          bash scripts/agh-core.sh
          bash scripts/misc.sh
          if [[ "$TUNNEL" == "all" && "$BRANCH" != "21.02.7" ]]; then 
              echo "Tunnel option: $TUNNEL"
              bash scripts/tunnel_app.sh openclash-passwall
          elif [[ ("$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall") && "$BRANCH" != "21.02.7" || "$TUNNEL" == "openclash" ]]; then
              echo "tunnel option: $TUNNEL"
              bash scripts/tunnel_app.sh "$TUNNEL"
          elif [ "$TUNNEL" = "no-tunnel" ]; then
              echo "Tunnel not selected"
          else
              echo "Cannot install Passwall on older branch $BRANCH !"
              exit 1
          fi
          if [ "$TUNNEL" = "openclash" ] || [ "$TUNNEL" = "openclash-passwall" ]; then bash scripts/clash-core.sh; fi
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware ${{ env.BASE }}-${{ env.BRANCH }}-${{ inputs.target }}
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          mkdir -p compiled_images
          if [ "$TUNNEL" == "all" ]; then
            for t in openclash-passwall openclash passwall no-tunnel; do
              echo "Compiling with tunnel: $t"
              if [ "$CLEAN" == "true" ]; echo "Start 'make clean'.."; then make clean; fi
              time bash make-build.sh $PROFILE $t
              rm -rf bin/targets/"$TARGET_SYSTEM"/*.{json,manifest,bin,*-rootfs*,sha256sums}
              for file in bin/targets/"$TARGET_SYSTEM"/*-"$TARGET_NAME"-*.img.gz; do mv "$file" compiled_images/fri_$(basename "$file" .img.gz)$( echo "_$t" )_$DATE.img.gz; done
            done
          else
            bash make-build.sh $PROFILE $t
            rm -rf bin/targets/"$TARGET_SYSTEM"/*.{json,manifest,bin,*-rootfs*,sha256sums}
            for file in bin/targets/"$TARGET_SYSTEM"/*-"$TARGET_NAME"-*.img.gz; do mv "$file" compiled_images/fri_$(basename "$file" .img.gz)$( echo "_$TUNNEL" )_$DATE.img.gz; done
          fi
          sha256sum compiled_images/fri_*.img.gz > compiled_images/sha256sums
          ls compiled_images
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: steps.compile.outputs.status == 'success' && !cancelled()
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.WORKING_DIR }}/compiled_images//*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: ${{ env.PROFILE }}-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATE }}
          overwrite: true
          body: |
            ### friWrt ${{ env.BASE }}-${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            See [here](https://github.com/frizkyiman/friWrt-MyWrtBuilder/) for more detail feature and other information.
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: friwrt
            - Default WIFI name: friWrt (if device supported)
            - Default WIFI password: friwrt2023 (if device supported)
