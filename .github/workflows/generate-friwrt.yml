name: Generate friWrt Firmware

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select Device Target:"
        required: true
        default: "rpi-4"
        type: choice
        options:
          - rpi-1
          - rpi-2
          - rpi-3
          - rpi-4
          - x86-64
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:21.02.7"
        type: choice
        options:
          - openwrt:snapshots
          - openwrt:21.02.7
          - openwrt:22.03.5
          - openwrt:23.05.2
          - immortalwrt:snapshots
          - immortalwrt:21.02.7
          - immortalwrt:23.05.1
      rootfs:
        description: 'Set RootFS Partition Size (Mb):'
        required: true
        default: '5000'
      squashfs:
        description: "Generate Squashfs image:"
        required: true
        default: "false"
        type: choice
        options:
          - true
          - false
      release:
        description: "Upload Image to Release:"
        required: true
        default: "true"
        type: choice
        options:
          - true
          - false

env:
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  ROOTFS_SIZE: ${{ inputs.rootfs}}
  ROOTFS_SQUASHFS: ${{ inputs.squashfs }}
  UPLOAD_ARTIFACTS: false
  TZ: Asia/Jakarta

jobs:
  Generate:
    runs-on: ubuntu-latest

    steps:
      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Setup Environment Variables
        run: |
          if [ "$TARGET" == "rpi-1" ]; then
            DEVICE="rpi-1"
            TARGET_1="bcm27xx/2708"
            TARGET_2="bcm27xx-2708"
            ARCH_1="armv6"
            ARCH_2=""
          elif [ "$TARGET" == "rpi-2" ]; then
            DEVICE="rpi-2"
            TARGET_1="bcm27xx/2709"
            TARGET_2="bcm27xx-2709"
            ARCH_1="armv7"
            ARCH_2=""
          elif [ "$TARGET" == "rpi-3" ]; then
            DEVICE="rpi-3"
            TARGET_1="bcm27xx/2710"
            TARGET_2="bcm27xx-2710"
            ARCH_1="armv7"
            ARCH_2=""
          elif [ "$TARGET" == "rpi-4" ]; then
            DEVICE="rpi-4"
            TARGET_1="bcm27xx/2711"
            TARGET_2="bcm27xx-2711"
            ARCH_1="arm64"
            ARCH_2="aarch64"
          elif [ "$TARGET" == "x86-64" ]; then
            DEVICE="generic"
            TARGET_1="x86/64"
            TARGET_2="x86-64"
            ARCH_1="amd64"
            ARCH_2=x86_64
          fi
          echo "DOWNLOAD_BASE=https://downloads."${RELEASE_BRANCH%:*}".org" >> $GITHUB_ENV
          echo "BUILD_SH=build-"${RELEASE_BRANCH%:*}".sh" >> $GITHUB_ENV
          echo "PATCH_SH=scripts/builder-patch-"${RELEASE_BRANCH%:*}".sh" >> $GITHUB_ENV
          echo "WORKING_DIR="${RELEASE_BRANCH%:*}"-imagebuilder-$TARGET.Linux-x86_64" >> $GITHUB_ENV
          echo "BASE=${RELEASE_BRANCH%:*}" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH#*:}" >> $GITHUB_ENV
          echo "PROFILE=$DEVICE" >> $GITHUB_ENV
          echo "tags=$( [ "$BRANCH" == "21.02.7" ] && echo "21.02" ) >> $GITHUB_ENV
          echo "ARCH=$ARCH_1" >> $GITHUB_ENV
          echo "ARCH_2=$ARCH_2" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=$TARGET_1" >> $GITHUB_ENV
          echo "TARGET_NAME=$TARGET_2" >> $GITHUB_ENV
          echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: origin

      - name: Download Image Builder ${{ env.BASE }}-${{ env.BRANCH }}-${{ inputs.target }}
        id: download
        run: |
          SNAPSHOTS="$DOWNLOAD_BASE/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$TARGET_NAME.Linux-x86_64.tar.xz"
          RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
          [ "$BRANCH" == "snapshots" ] && wget -nv "$SNAPSHOTS" || wget -nv "$RELEASE"
          tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          [ "$ARCH" == "amd64" ] && ARCH=x86
          if [ "$BRANCH" == "21.02.7" ]; then
             grep -E "^all-all|^old-$tags|^$ARCH-$tags" external-package-urls.txt | awk '{print $2}' > output_url.txt
          else
             grep -E "^all-all|^all|^$ARCH" external-package-urls.txt | grep -vE "^$ARCH-$tags" | awk '{print $2}' > output_url.txt
          fi
          wget --no-check-certificate -i output_url.txt -nv -P packages
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash $PATCH_SH
          bash scripts/clash-core.sh
          bash scripts/agh-core.sh
          bash scripts/misc.sh
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware ${{ env.BASE }}-${{ env.BRANCH }}-${{ inputs.target }}
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash $BUILD_SH
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR/bin/targets/$TARGET_SYSTEM/
          for file in *-$TARGET_NAME-*.img.gz; do mv "$file" "fri_${file%.img.gz}_$DATE.img.gz"; done
          rm -rf *.json *.manifest *.bin *-rootfs.*
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload Firmware to Artifacts
        uses: actions/upload-artifact@v2
        if: env.UPLOAD_ARTIFACTS == 'true' && !cancelled()
        with:
          name: ${{ env.BASE }}-${{ env.BRANCH }}-$TARGET_NAME-images-${{ env.DATETIME }}
          path: ${{ env.WORKING_DIR }}/bin/targets/${{ env.TARGET_SYSTEM }}//*

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: github.event.inputs.release == 'true'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.WORKING_DIR }}/bin/targets/${{ env.TARGET_SYSTEM }}//*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: ${{ env.PROFILE }}-${{ env.BASE }}-${{ env.BRANCH }}
          overwrite: true
          body: |
            ### friWrt ${{ env.BASE }}-${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: none
            - Default WIFI name: friWrt_5g
            - Default WIFI password: none
