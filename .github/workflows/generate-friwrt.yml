# This is a basic workflow to help you get started with Actions

name: Generate friWrt Firmware

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      source_base:
        description: "Select the Source Base"
        required: true
        default: "openwrt"
        type: choice
        options:
          - openwrt
          - immortalwrt
      target:
        description: "Select Device Target"
        required: true
        default: "rpi-4"
        type: choice
        options:
          - rpi-4
          - x86-64
      source_branch:
        description: "Select Branch Revision"
        required: true
        default: "21.02.7"
        type: choice
        options:
          - snapshots
          - 21.02.7
          - 22.03.5
          - 23.05.1
          - 23.05.2
      rootfs:
        description: 'Set Rootfs size'
        required: true
        default: '3600'
      squashfs:
        description: "Generate Squashfs image"
        required: true
        default: "false"
        type: choice
        options:
          - true
          - false
      release:
        description: "Upload Image to Release"
        required: true
        default: "true"
        type: choice
        options:
          - true
          - false

env:
  DOWNLOAD_BASE: https://downloads.${{ inputs.source_base }}.org
  TARGET: ${{ inputs.target }}
  BASE: ${{ inputs.source_base }}
  BRANCH: ${{ inputs.source_branch }}
  BUILD_SH: build-${{ inputs.source_base }}.sh
  PATCH_SH: scripts/builder-patch-${{ inputs.source_base }}.sh
  WORKING_DIR: ${{ inputs.source_base }}-imagebuilder-${{ inputs.target }}.Linux-x86_64
  ROOTFS_SIZE: ${{ inputs.rootfs}}
  ROOTFS_SQUASHFS: ${{ inputs.squashfs }}
  UPLOAD_ARTIFACTS: false
  TZ: Asia/Jakarta

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Generate:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Setup Environment Variables
        run: |
          echo "PROFILE=$( [ "$TARGET" == "rpi-4" ] && echo "rpi-4" || echo "generic" )" >> $GITHUB_ENV
          echo "ARCH=$( [ "$TARGET" == "rpi-4" ] && echo "aarch64_cortex-a72" || echo "x86_64" )" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=$( [ "$TARGET" == "rpi-4" ] && echo "bcm27xx/bcm2711" || echo "x86/64" )" >> $GITHUB_ENV
          echo "TARGET_NAME=$( [ "$TARGET" == "rpi-4" ] && echo "bcm27xx-bcm2711" || echo "x86-64" )" >> $GITHUB_ENV
          echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: origin

      - name: Download Image Builder ${{ env.BASE }}-${{ env.BRANCH }}-${{ inputs.target }}
        id: download
        run: |
          SNAPSHOTS="$DOWNLOAD_BASE/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$TARGET_NAME.Linux-x86_64.tar.xz"
          RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
          [ "$BRANCH" == "snapshots" ] && wget -nv "$SNAPSHOTS" || wget -nv "$RELEASE"
          tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          wget --no-check-certificate -i external-package-urls$( [[ "$(echo $BRANCH | cut -d'.' -f1)" == "21" ]] && echo -21.02 || echo ).txt -nv -P packages
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash $PATCH_SH
          bash scripts/clash-core.sh
          bash scripts/agh-core.sh
          bash scripts/misc.sh
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware ${{ env.BASE }}-${{ env.BRANCH }}-${{ inputs.target }}
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash $BUILD_SH
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR/bin/targets/$TARGET_SYSTEM/
          for file in *-$TARGET_NAME-*.img.gz; do mv "$file" "fri_${file%.img.gz}_$DATE.img.gz"; done
          rm -rf *.json *.manifest *.bin *-rootfs.*
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload Firmware to Artifacts
        uses: actions/upload-artifact@v2
        if: env.UPLOAD_ARTIFACTS == 'true' && !cancelled()
        with:
          name: ${{ env.BASE }}-${{ env.BRANCH }}-$TARGET_NAME-images-${{ env.DATETIME }}
          path: ${{ env.WORKING_DIR }}/bin/targets/${{ env.TARGET_SYSTEM }}//*

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: github.event.inputs.release == 'true'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.WORKING_DIR }}/bin/targets/${{ env.TARGET_SYSTEM }}//*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: ${{ env.PROFILE }}-${{ env.BASE }}-${{ env.BRANCH }}
          overwrite: true
          body: |
            ### friWrt ${{ env.BASE }}-${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: none
            - Default WIFI name: friWrt_5g
            - Default WIFI password: none
